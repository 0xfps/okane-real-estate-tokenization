{
  "address": "0xC504c46e3Bde5B0AA6f6081D32625D3cA14bf615",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INITAL_PROPERTY_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalTokens",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "country",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image_link",
          "type": "string"
        }
      ],
      "name": "addAPropertyToSell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "checkTokenSupplyStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCountry",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPropertyName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokensSold",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTotalTokens",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_propertyId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToImageLink",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToProperty",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "country",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalTokenSupplyForAGivenProperty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_propertyId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_newStatus",
          "type": "bool"
        }
      ],
      "name": "updatePropertyStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawUSDT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x07917d5805b0d5a065c9beb3d2e4838e837a208cbc94b1a13ee566f667a02f4f",
  "receipt": {
    "to": null,
    "from": "0xff7791F005dE78008Bc8990c9f889725027629F4",
    "contractAddress": "0xC504c46e3Bde5B0AA6f6081D32625D3cA14bf615",
    "transactionIndex": 10,
    "gasUsed": "4393051",
    "logsBloom": "0x
    "blockHash": "0xb1e8602c74638d41a1ff7ce8109b0f709f9048febf22a9b09a6eb36a2db8fb50",
    "transactionHash": "0x07917d5805b0d5a065c9beb3d2e4838e837a208cbc94b1a13ee566f667a02f4f",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 4108017,
        "transactionHash": "0x07917d5805b0d5a065c9beb3d2e4838e837a208cbc94b1a13ee566f667a02f4f",
        "address": "0xC504c46e3Bde5B0AA6f6081D32625D3cA14bf615",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ff7791f005de78008bc8990c9f889725027629f4"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0xb1e8602c74638d41a1ff7ce8109b0f709f9048febf22a9b09a6eb36a2db8fb50"
      }
    ],
    "blockNumber": 4108017,
    "cumulativeGasUsed": "10297277",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "0cd1f4eb8be367ab6e7b59a307ac5bc5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITAL_PROPERTY_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_link\",\"type\":\"string\"}],\"name\":\"addAPropertyToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkTokenSupplyStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCountry\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPropertyName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokensSold\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTotalTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_propertyId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToImageLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToProperty\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalTokenSupplyForAGivenProperty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_propertyId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"updatePropertyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the concatenation of the `_baseURI` and the token-specific uri if the latter is set This enables the following behaviors: - if `_tokenURIs[tokenId]` is set, then the result is the concatenation   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`   is empty per default); - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`   which in most cases will contain `ERC1155._uri`; - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a   uri value set, then the result is empty.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RealEstateV2.sol\":\"RealEstateV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/Strings.sol\\\";\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorage is ERC1155 {\\n    using Strings for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI = \\\"\\\";\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x4e7bcc6aa9b150e125df8afbfbca5dfb7c92fa4fb01985f2f595ce0c96153cff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/RealEstateV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function transfer(address _to, uint256 _value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\ninterface IUSDT {\\r\\n    function transfer(address, uint256) external;\\r\\n\\r\\n    function transferFrom(address, address, uint) external;\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\ncontract RealEstateV2 is ERC1155URIStorage, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private _tokenIds;\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    // uint256 public currentPropertySupply;\\r\\n    uint256 public constant INITAL_PROPERTY_PRICE = 50;\\r\\n\\r\\n    // Put an enum with cancelled, open, sold;\\r\\n\\r\\n    struct Property {\\r\\n        string name;\\r\\n        uint256 totalTokens;\\r\\n        uint256 tokensSold;\\r\\n        string country;\\r\\n        // string addressInfo;\\r\\n        // string latitude;\\r\\n        // string longtitude;\\r\\n        // string area;\\r\\n        // Put an enum with cancelled, open, sold;\\r\\n    }\\r\\n\\r\\n    // Property[] public propertyList;\\r\\n    mapping(uint256 => Property) public tokenIdToProperty;\\r\\n    mapping(uint => bool) public checkTokenSupplyStatus;\\r\\n    mapping(uint => uint) public totalTokenSupplyForAGivenProperty;\\r\\n    mapping(uint => string) public tokenIdToImageLink;\\r\\n\\r\\n    constructor() ERC1155(\\\"\\\") {\\r\\n        name = \\\"Wakaru\\\";\\r\\n        symbol = \\\"WK\\\";\\r\\n    }\\r\\n\\r\\n    function getTokenURI(uint256 _tokenId) public view returns (string memory) {\\r\\n        bytes memory dataURI = abi.encodePacked(\\r\\n            \\\"{\\\",\\r\\n            '\\\"name\\\": \\\"',\\r\\n            getPropertyName(_tokenId),\\r\\n            '\\\",',\\r\\n            '\\\"description\\\": \\\"Fractionalised Real Estate Property by Wakaru Company\\\",',\\r\\n            '\\\"totalTokens\\\": \\\"',\\r\\n            getTotalTokens(_tokenId),\\r\\n            '\\\",',\\r\\n            '\\\"tokensSold\\\": \\\"',\\r\\n            getTokensSold(_tokenId),\\r\\n            '\\\",',\\r\\n            '\\\"country\\\": \\\"',\\r\\n            getCountry(_tokenId),\\r\\n            '\\\",',\\r\\n            '\\\"image\\\": \\\"',\\r\\n            tokenIdToImageLink[_tokenId],\\r\\n            '\\\"',\\r\\n            \\\"}\\\"\\r\\n        );\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(dataURI)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getTotalTokens(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (string memory) {\\r\\n        uint256 totalTokens = tokenIdToProperty[_tokenId].totalTokens;\\r\\n        return totalTokens.toString();\\r\\n    }\\r\\n\\r\\n    function getTokensSold(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (string memory) {\\r\\n        uint256 tokensSold = tokenIdToProperty[_tokenId].tokensSold;\\r\\n        return tokensSold.toString();\\r\\n    }\\r\\n\\r\\n    function getCountry(uint256 _tokenId) public view returns (string memory) {\\r\\n        string memory country = tokenIdToProperty[_tokenId].country;\\r\\n        return country;\\r\\n    }\\r\\n\\r\\n    function getPropertyName(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (string memory) {\\r\\n        string memory propertyName = tokenIdToProperty[_tokenId].name;\\r\\n        propertyName = string(\\r\\n            abi.encodePacked(\\\"Property #\\\", _tokenId.toString())\\r\\n        );\\r\\n        return propertyName;\\r\\n    }\\r\\n\\r\\n    function addAPropertyToSell(\\r\\n        uint256 _totalTokens,\\r\\n        string memory country,\\r\\n        string memory image_link\\r\\n    ) public onlyOwner {\\r\\n        _tokenIds.increment();\\r\\n\\r\\n        uint256 currentTokenId = _tokenIds.current();\\r\\n        checkTokenSupplyStatus[currentTokenId] = true;\\r\\n\\r\\n        Property memory currentProperty = Property(\\r\\n            getPropertyName(currentTokenId),\\r\\n            _totalTokens,\\r\\n            0,\\r\\n            country\\r\\n        );\\r\\n        tokenIdToProperty[currentTokenId] = currentProperty;\\r\\n\\r\\n        tokenIdToImageLink[currentTokenId] = image_link;\\r\\n        _setURI(currentTokenId, getTokenURI(currentTokenId));\\r\\n    }\\r\\n\\r\\n    function updatePropertyStatus(\\r\\n        uint256 _propertyId,\\r\\n        bool _newStatus\\r\\n    ) public onlyOwner {\\r\\n        checkTokenSupplyStatus[_propertyId] = _newStatus;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 _amount, uint256 _propertyId) public {\\r\\n        require(\\r\\n            checkTokenSupplyStatus[_propertyId],\\r\\n            \\\"The property you would like to buy is not available in this time!\\\"\\r\\n        );\\r\\n\\r\\n        IUSDT tether = IUSDT(\\r\\n            address(0xcd198e12CD9a2Fe20BC81f437b863f61f2D5C2Df)\\r\\n        ); // Mega Token Currently\\r\\n\\r\\n        uint256 decimal = tether.decimals();\\r\\n\\r\\n        tether.transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amount.mul(50).mul(10 ** decimal)\\r\\n        );\\r\\n\\r\\n        // How will we add a defense mechanism over here?\\r\\n\\r\\n        // require(propertyTokenPrice.mul(_amount) <= msg.value, \\\"Not enough USDT supplied!\\\");\\r\\n\\r\\n        Property storage currentProperty = tokenIdToProperty[_propertyId];\\r\\n\\r\\n        require(\\r\\n            currentProperty.totalTokens >=\\r\\n                (currentProperty.tokensSold.add(_amount)),\\r\\n            \\\"There are no available tokens left for selected amount!\\\"\\r\\n        );\\r\\n\\r\\n        currentProperty.tokensSold += _amount;\\r\\n\\r\\n        _mint(msg.sender, _propertyId, _amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    // Implement a withdraw for USDT\\r\\n\\r\\n    function withdrawEther() public onlyOwner {\\r\\n        uint balance = address(this).balance;\\r\\n        payable(msg.sender).transfer(balance);\\r\\n    }\\r\\n\\r\\n    // Function to withdraw ERC20 tokens to the owner's account\\r\\n    function withdrawERC20(\\r\\n        uint256 amount,\\r\\n        address _tokenAddress\\r\\n    ) external onlyOwner {\\r\\n        require(amount > 0, \\\"Withdrawal amount must be greater than zero\\\");\\r\\n\\r\\n        IUSDT tetherToken = IUSDT(_tokenAddress);\\r\\n\\r\\n        tetherToken.transfer(owner(), amount);\\r\\n\\r\\n        // Transfer tokens from the contract to the owner\\r\\n        // require(tetherToken.transfer(owner(), amount), \\\"Token transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    // Function to withdraw USDT _tokenAddress will be USDT address on the mainnet, check polygon USDT as well THO\\r\\n    function withdrawUSDT(uint256 amount) external onlyOwner {\\r\\n        require(amount > 0, \\\"Withdrawal amount must be greater than zero\\\");\\r\\n\\r\\n        IUSDT usdt = IUSDT(0xcd198e12CD9a2Fe20BC81f437b863f61f2D5C2Df);\\r\\n\\r\\n        // Transfer tokens from the contract to the owner\\r\\n        usdt.transfer(owner(), amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x43d8c33eec17efd66615af2f6c121b53e5fff3be1558382459fa7d0d1e683584\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260405180602001604052806000815250600390805190602001906200002b92919062000208565b503480156200003957600080fd5b50604051806020016040528060008152506200005b816200011e60201b60201c565b506200007c620000706200013a60201b60201c565b6200014260201b60201c565b6040518060400160405280600681526020017f57616b617275000000000000000000000000000000000000000000000000000081525060079080519060200190620000c992919062000208565b506040518060400160405280600281526020017f574b000000000000000000000000000000000000000000000000000000000000815250600890805190602001906200011792919062000208565b506200031d565b80600290805190602001906200013692919062000208565b5050565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200021690620002e7565b90600052602060002090601f0160209004810192826200023a576000855562000286565b82601f106200025557805160ff191683800117855562000286565b8280016001018555821562000286579182015b828111156200028557825182559160200191906001019062000268565b5b50905062000295919062000299565b5090565b5b80821115620002b45760008160009055506001016200029a565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200030057607f821691505b60208210811415620003175762000316620002b8565b5b50919050565b614d45806200032d6000396000f3fe608060405234801561001057600080fd5b50600436106101ce5760003560e01c80638da5cb5b11610104578063c20938e0116100a2578063e985e9c511610071578063e985e9c514610566578063f242432a14610596578063f2fde38b146105b2578063ff2d2e07146105ce576101ce565b8063c20938e0146104cb578063ca98b78d146104e7578063dba197b114610503578063e674a85114610533576101ce565b80639c0c891f116100de5780639c0c891f14610433578063a22cb4651461044f578063ab15d2e61461046b578063afa5e0a91461049b576101ce565b80638da5cb5b146103c75780639029b815146103e557806395d89b4114610415576101ce565b80633ea521ef116101715780635a80e9fc1161014b5780635a80e9fc14610365578063715018a6146103955780637362377b1461039f57806384908631146103a9576101ce565b80633ea521ef146102e95780634e1273f41461030557806357d1780514610335576101ce565b80630e89341c116101ad5780630e89341c146102515780631b2ef1ca146102815780632eb2c2d61461029d5780633bb3a24d146102b9576101ce565b8062fdd58e146101d357806301ffc9a71461020357806306fdde0314610233575b600080fd5b6101ed60048036038101906101e89190612cac565b6105fe565b6040516101fa9190612cfb565b60405180910390f35b61021d60048036038101906102189190612d6e565b6106c7565b60405161022a9190612db6565b60405180910390f35b61023b6107a9565b6040516102489190612e6a565b60405180910390f35b61026b60048036038101906102669190612e8c565b610837565b6040516102789190612e6a565b60405180910390f35b61029b60048036038101906102969190612eb9565b61091c565b005b6102b760048036038101906102b291906130f6565b610b5c565b005b6102d360048036038101906102ce9190612e8c565b610bfd565b6040516102e09190612e6a565b60405180910390f35b61030360048036038101906102fe9190612e8c565b610c8d565b005b61031f600480360381019061031a9190613288565b610d69565b60405161032c91906133be565b60405180910390f35b61034f600480360381019061034a9190612e8c565b610e82565b60405161035c9190612e6a565b60405180910390f35b61037f600480360381019061037a9190612e8c565b610eb0565b60405161038c9190612e6a565b60405180910390f35b61039d610f88565b005b6103a7610f9c565b005b6103b1610ff3565b6040516103be9190612cfb565b60405180910390f35b6103cf610ff8565b6040516103dc91906133ef565b60405180910390f35b6103ff60048036038101906103fa9190612e8c565b611022565b60405161040c9190612db6565b60405180910390f35b61041d611042565b60405161042a9190612e6a565b60405180910390f35b61044d60048036038101906104489190613436565b6110d0565b005b61046960048036038101906104649190613476565b611107565b005b61048560048036038101906104809190612e8c565b61111d565b6040516104929190612e6a565b60405180910390f35b6104b560048036038101906104b09190612e8c565b6111bd565b6040516104c29190612e6a565b60405180910390f35b6104e560048036038101906104e091906134b6565b61126b565b005b61050160048036038101906104fc9190613597565b611334565b005b61051d60048036038101906105189190612e8c565b611454565b60405161052a9190612cfb565b60405180910390f35b61054d60048036038101906105489190612e8c565b61146c565b60405161055d9493929190613622565b60405180910390f35b610580600480360381019061057b9190613675565b6115ac565b60405161058d9190612db6565b60405180910390f35b6105b060048036038101906105ab91906136b5565b611640565b005b6105cc60048036038101906105c7919061374c565b6116e1565b005b6105e860048036038101906105e39190612e8c565b611765565b6040516105f59190612e6a565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561066f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610666906137eb565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061079257507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107a257506107a182611793565b5b9050919050565b600780546107b69061383a565b80601f01602080910402602001604051908101604052809291908181526020018280546107e29061383a565b801561082f5780601f106108045761010080835404028352916020019161082f565b820191906000526020600020905b81548152906001019060200180831161081257829003601f168201915b505050505081565b606060006004600084815260200190815260200160002080546108599061383a565b80601f01602080910402602001604051908101604052809291908181526020018280546108859061383a565b80156108d25780601f106108a7576101008083540402835291602001916108d2565b820191906000526020600020905b8154815290600101906020018083116108b557829003601f168201915b5050505050905060008151116108f0576108eb836117fd565b610914565b60038160405160200161090492919061393c565b6040516020818303038152906040525b915050919050565b600a600082815260200190815260200160002060009054906101000a900460ff1661097c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610973906139f8565b60405180910390fd5b600073cd198e12cd9a2fe20bc81f437b863f61f2d5c2df905060008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190613a51565b60ff1690508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330610a5b85600a610a399190613be0565b610a4d60328b61189190919063ffffffff16565b61189190919063ffffffff16565b6040518463ffffffff1660e01b8152600401610a7993929190613c2b565b600060405180830381600087803b158015610a9357600080fd5b505af1158015610aa7573d6000803e3d6000fd5b505050506000600960008581526020019081526020016000209050610ad98582600201546118a790919063ffffffff16565b81600101541015610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1690613cd4565b60405180910390fd5b84816002016000828254610b339190613cf4565b92505081905550610b55338587604051806020016040528060008152506118bd565b5050505050565b610b64611a6e565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610baa5750610ba985610ba4611a6e565b6115ac565b5b610be9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be090613dbc565b60405180910390fd5b610bf68585858585611a76565b5050505050565b60606000610c0a83610eb0565b610c1384611765565b610c1c85610e82565b610c25866111bd565b600c6000888152602001908152602001600020604051602001610c4c959493929190614120565b6040516020818303038152906040529050610c6681611d98565b604051602001610c769190614246565b604051602081830303815290604052915050919050565b610c95611efc565b60008111610cd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccf906142da565b60405180910390fd5b600073cd198e12cd9a2fe20bc81f437b863f61f2d5c2df90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610d15610ff8565b846040518363ffffffff1660e01b8152600401610d339291906142fa565b600060405180830381600087803b158015610d4d57600080fd5b505af1158015610d61573d6000803e3d6000fd5b505050505050565b60608151835114610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da690614395565b60405180910390fd5b6000835167ffffffffffffffff811115610dcc57610dcb612efe565b5b604051908082528060200260200182016040528015610dfa5781602001602082028036833780820191505090505b50905060005b8451811015610e7757610e47858281518110610e1f57610e1e6143b5565b5b6020026020010151858381518110610e3a57610e396143b5565b5b60200260200101516105fe565b828281518110610e5a57610e596143b5565b5b60200260200101818152505080610e70906143e4565b9050610e00565b508091505092915050565b6060600060096000848152602001908152602001600020600201549050610ea881611f7a565b915050919050565b60606000600960008481526020019081526020016000206000018054610ed59061383a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f019061383a565b8015610f4e5780601f10610f2357610100808354040283529160200191610f4e565b820191906000526020600020905b815481529060010190602001808311610f3157829003601f168201915b50505050509050610f5e83611f7a565b604051602001610f6e9190614479565b604051602081830303815290604052905080915050919050565b610f90611efc565b610f9a6000612052565b565b610fa4611efc565b60004790503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610fef573d6000803e3d6000fd5b5050565b603281565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a6020528060005260406000206000915054906101000a900460ff1681565b6008805461104f9061383a565b80601f016020809104026020016040519081016040528092919081815260200182805461107b9061383a565b80156110c85780601f1061109d576101008083540402835291602001916110c8565b820191906000526020600020905b8154815290600101906020018083116110ab57829003601f168201915b505050505081565b6110d8611efc565b80600a600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b611119611112611a6e565b8383612118565b5050565b600c602052806000526040600020600091509050805461113c9061383a565b80601f01602080910402602001604051908101604052809291908181526020018280546111689061383a565b80156111b55780601f1061118a576101008083540402835291602001916111b5565b820191906000526020600020905b81548152906001019060200180831161119857829003601f168201915b505050505081565b606060006009600084815260200190815260200160002060030180546111e29061383a565b80601f016020809104026020016040519081016040528092919081815260200182805461120e9061383a565b801561125b5780601f106112305761010080835404028352916020019161125b565b820191906000526020600020905b81548152906001019060200180831161123e57829003601f168201915b5050505050905080915050919050565b611273611efc565b600082116112b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ad906142da565b60405180910390fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6112df610ff8565b856040518363ffffffff1660e01b81526004016112fd9291906142fa565b600060405180830381600087803b15801561131757600080fd5b505af115801561132b573d6000803e3d6000fd5b50505050505050565b61133c611efc565b6113466006612285565b6000611352600661229b565b90506001600a600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000604051806080016040528061139684610eb0565b815260200186815260200160008152602001858152509050806009600084815260200190815260200160002060008201518160000190805190602001906113de929190612b61565b506020820151816001015560408201518160020155606082015181600301908051906020019061140f929190612b61565b5090505082600c6000848152602001908152602001600020908051906020019061143a929190612b61565b5061144d8261144884610bfd565b6122a9565b5050505050565b600b6020528060005260406000206000915090505481565b600960205280600052604060002060009150905080600001805461148f9061383a565b80601f01602080910402602001604051908101604052809291908181526020018280546114bb9061383a565b80156115085780601f106114dd57610100808354040283529160200191611508565b820191906000526020600020905b8154815290600101906020018083116114eb57829003601f168201915b5050505050908060010154908060020154908060030180546115299061383a565b80601f01602080910402602001604051908101604052809291908181526020018280546115559061383a565b80156115a25780601f10611577576101008083540402835291602001916115a2565b820191906000526020600020905b81548152906001019060200180831161158557829003601f168201915b5050505050905084565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611648611a6e565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061168e575061168d85611688611a6e565b6115ac565b5b6116cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c490613dbc565b60405180910390fd5b6116da8585858585612315565b5050505050565b6116e9611efc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611759576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117509061450d565b60405180910390fd5b61176281612052565b50565b606060006009600084815260200190815260200160002060010154905061178b81611f7a565b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606002805461180c9061383a565b80601f01602080910402602001604051908101604052809291908181526020018280546118389061383a565b80156118855780601f1061185a57610100808354040283529160200191611885565b820191906000526020600020905b81548152906001019060200180831161186857829003601f168201915b50505050509050919050565b6000818361189f919061452d565b905092915050565b600081836118b59190613cf4565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561192d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611924906145f9565b60405180910390fd5b6000611937611a6e565b90506000611944856125b1565b90506000611951856125b1565b90506119628360008985858961262b565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119c19190613cf4565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611a3f929190614619565b60405180910390a4611a5683600089858589612633565b611a658360008989898961263b565b50505050505050565b600033905090565b8151835114611aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab1906146b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2190614746565b60405180910390fd5b6000611b34611a6e565b9050611b4481878787878761262b565b60005b8451811015611cf5576000858281518110611b6557611b646143b5565b5b602002602001015190506000858381518110611b8457611b836143b5565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1c906147d8565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611cda9190613cf4565b9250508190555050505080611cee906143e4565b9050611b47565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611d6c9291906147f8565b60405180910390a4611d82818787878787612633565b611d90818787878787612813565b505050505050565b6060600082511415611dbb57604051806020016040528060008152509050611ef7565b6000604051806060016040528060408152602001614cd06040913990506000600360028551611dea9190613cf4565b611df4919061485e565b6004611e00919061452d565b67ffffffffffffffff811115611e1957611e18612efe565b5b6040519080825280601f01601f191660200182016040528015611e4b5781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015611eb7576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050611e5c565b5050600386510660018114611ed35760028114611ee657611eee565b603d6001830353603d6002830353611eee565b603d60018303535b50505080925050505b919050565b611f04611a6e565b73ffffffffffffffffffffffffffffffffffffffff16611f22610ff8565b73ffffffffffffffffffffffffffffffffffffffff1614611f78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6f906148db565b60405180910390fd5b565b606060006001611f89846129eb565b01905060008167ffffffffffffffff811115611fa857611fa7612efe565b5b6040519080825280601f01601f191660200182016040528015611fda5781602001600182028036833780820191505090505b509050600082602001820190505b600115612047578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816120315761203061482f565b5b049450600085141561204257612047565b611fe8565b819350505050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217e9061496d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516122789190612db6565b60405180910390a3505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b806004600084815260200190815260200160002090805190602001906122d0929190612b61565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6122fc84610837565b6040516123099190612e6a565b60405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237c90614746565b60405180910390fd5b600061238f611a6e565b9050600061239c856125b1565b905060006123a9856125b1565b90506123b983898985858961262b565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015612450576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612447906147d8565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125059190613cf4565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612582929190614619565b60405180910390a4612598848a8a86868a612633565b6125a6848a8a8a8a8a61263b565b505050505050505050565b60606000600167ffffffffffffffff8111156125d0576125cf612efe565b5b6040519080825280602002602001820160405280156125fe5781602001602082028036833780820191505090505b5090508281600081518110612616576126156143b5565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b61265a8473ffffffffffffffffffffffffffffffffffffffff16612b3e565b1561280b578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016126a09594939291906149e2565b6020604051808303816000875af19250505080156126dc57506040513d601f19601f820116820180604052508101906126d99190614a51565b60015b612782576126e8614a8b565b806308c379a0141561274557506126fd614aad565b806127085750612747565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273c9190612e6a565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277990614bb5565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280090614c47565b60405180910390fd5b505b505050505050565b6128328473ffffffffffffffffffffffffffffffffffffffff16612b3e565b156129e3578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612878959493929190614c67565b6020604051808303816000875af19250505080156128b457506040513d601f19601f820116820180604052508101906128b19190614a51565b60015b61295a576128c0614a8b565b806308c379a0141561291d57506128d5614aad565b806128e0575061291f565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129149190612e6a565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295190614bb5565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146129e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d890614c47565b60405180910390fd5b505b505050505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612a49577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612a3f57612a3e61482f565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612a86576d04ee2d6d415b85acef81000000008381612a7c57612a7b61482f565b5b0492506020810190505b662386f26fc100008310612ab557662386f26fc100008381612aab57612aaa61482f565b5b0492506010810190505b6305f5e1008310612ade576305f5e1008381612ad457612ad361482f565b5b0492506008810190505b6127108310612b03576127108381612af957612af861482f565b5b0492506004810190505b60648310612b265760648381612b1c57612b1b61482f565b5b0492506002810190505b600a8310612b35576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612b6d9061383a565b90600052602060002090601f016020900481019282612b8f5760008555612bd6565b82601f10612ba857805160ff1916838001178555612bd6565b82800160010185558215612bd6579182015b82811115612bd5578251825591602001919060010190612bba565b5b509050612be39190612be7565b5090565b5b80821115612c00576000816000905550600101612be8565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612c4382612c18565b9050919050565b612c5381612c38565b8114612c5e57600080fd5b50565b600081359050612c7081612c4a565b92915050565b6000819050919050565b612c8981612c76565b8114612c9457600080fd5b50565b600081359050612ca681612c80565b92915050565b60008060408385031215612cc357612cc2612c0e565b5b6000612cd185828601612c61565b9250506020612ce285828601612c97565b9150509250929050565b612cf581612c76565b82525050565b6000602082019050612d106000830184612cec565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d4b81612d16565b8114612d5657600080fd5b50565b600081359050612d6881612d42565b92915050565b600060208284031215612d8457612d83612c0e565b5b6000612d9284828501612d59565b91505092915050565b60008115159050919050565b612db081612d9b565b82525050565b6000602082019050612dcb6000830184612da7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e0b578082015181840152602081019050612df0565b83811115612e1a576000848401525b50505050565b6000601f19601f8301169050919050565b6000612e3c82612dd1565b612e468185612ddc565b9350612e56818560208601612ded565b612e5f81612e20565b840191505092915050565b60006020820190508181036000830152612e848184612e31565b905092915050565b600060208284031215612ea257612ea1612c0e565b5b6000612eb084828501612c97565b91505092915050565b60008060408385031215612ed057612ecf612c0e565b5b6000612ede85828601612c97565b9250506020612eef85828601612c97565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f3682612e20565b810181811067ffffffffffffffff82111715612f5557612f54612efe565b5b80604052505050565b6000612f68612c04565b9050612f748282612f2d565b919050565b600067ffffffffffffffff821115612f9457612f93612efe565b5b602082029050602081019050919050565b600080fd5b6000612fbd612fb884612f79565b612f5e565b90508083825260208201905060208402830185811115612fe057612fdf612fa5565b5b835b818110156130095780612ff58882612c97565b845260208401935050602081019050612fe2565b5050509392505050565b600082601f83011261302857613027612ef9565b5b8135613038848260208601612faa565b91505092915050565b600080fd5b600067ffffffffffffffff82111561306157613060612efe565b5b61306a82612e20565b9050602081019050919050565b82818337600083830152505050565b600061309961309484613046565b612f5e565b9050828152602081018484840111156130b5576130b4613041565b5b6130c0848285613077565b509392505050565b600082601f8301126130dd576130dc612ef9565b5b81356130ed848260208601613086565b91505092915050565b600080600080600060a0868803121561311257613111612c0e565b5b600061312088828901612c61565b955050602061313188828901612c61565b945050604086013567ffffffffffffffff81111561315257613151612c13565b5b61315e88828901613013565b935050606086013567ffffffffffffffff81111561317f5761317e612c13565b5b61318b88828901613013565b925050608086013567ffffffffffffffff8111156131ac576131ab612c13565b5b6131b8888289016130c8565b9150509295509295909350565b600067ffffffffffffffff8211156131e0576131df612efe565b5b602082029050602081019050919050565b60006132046131ff846131c5565b612f5e565b9050808382526020820190506020840283018581111561322757613226612fa5565b5b835b81811015613250578061323c8882612c61565b845260208401935050602081019050613229565b5050509392505050565b600082601f83011261326f5761326e612ef9565b5b813561327f8482602086016131f1565b91505092915050565b6000806040838503121561329f5761329e612c0e565b5b600083013567ffffffffffffffff8111156132bd576132bc612c13565b5b6132c98582860161325a565b925050602083013567ffffffffffffffff8111156132ea576132e9612c13565b5b6132f685828601613013565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61333581612c76565b82525050565b6000613347838361332c565b60208301905092915050565b6000602082019050919050565b600061336b82613300565b613375818561330b565b93506133808361331c565b8060005b838110156133b1578151613398888261333b565b97506133a383613353565b925050600181019050613384565b5085935050505092915050565b600060208201905081810360008301526133d88184613360565b905092915050565b6133e981612c38565b82525050565b600060208201905061340460008301846133e0565b92915050565b61341381612d9b565b811461341e57600080fd5b50565b6000813590506134308161340a565b92915050565b6000806040838503121561344d5761344c612c0e565b5b600061345b85828601612c97565b925050602061346c85828601613421565b9150509250929050565b6000806040838503121561348d5761348c612c0e565b5b600061349b85828601612c61565b92505060206134ac85828601613421565b9150509250929050565b600080604083850312156134cd576134cc612c0e565b5b60006134db85828601612c97565b92505060206134ec85828601612c61565b9150509250929050565b600067ffffffffffffffff82111561351157613510612efe565b5b61351a82612e20565b9050602081019050919050565b600061353a613535846134f6565b612f5e565b90508281526020810184848401111561355657613555613041565b5b613561848285613077565b509392505050565b600082601f83011261357e5761357d612ef9565b5b813561358e848260208601613527565b91505092915050565b6000806000606084860312156135b0576135af612c0e565b5b60006135be86828701612c97565b935050602084013567ffffffffffffffff8111156135df576135de612c13565b5b6135eb86828701613569565b925050604084013567ffffffffffffffff81111561360c5761360b612c13565b5b61361886828701613569565b9150509250925092565b6000608082019050818103600083015261363c8187612e31565b905061364b6020830186612cec565b6136586040830185612cec565b818103606083015261366a8184612e31565b905095945050505050565b6000806040838503121561368c5761368b612c0e565b5b600061369a85828601612c61565b92505060206136ab85828601612c61565b9150509250929050565b600080600080600060a086880312156136d1576136d0612c0e565b5b60006136df88828901612c61565b95505060206136f088828901612c61565b945050604061370188828901612c97565b935050606061371288828901612c97565b925050608086013567ffffffffffffffff81111561373357613732612c13565b5b61373f888289016130c8565b9150509295509295909350565b60006020828403121561376257613761612c0e565b5b600061377084828501612c61565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b60006137d5602a83612ddc565b91506137e082613779565b604082019050919050565b60006020820190508181036000830152613804816137c8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061385257607f821691505b602082108114156138665761386561380b565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b600081546138998161383a565b6138a3818661386c565b945060018216600081146138be57600181146138cf57613902565b60ff19831686528186019350613902565b6138d885613877565b60005b838110156138fa578154818901526001820191506020810190506138db565b838801955050505b50505092915050565b600061391682612dd1565b613920818561386c565b9350613930818560208601612ded565b80840191505092915050565b6000613948828561388c565b9150613954828461390b565b91508190509392505050565b7f5468652070726f706572747920796f7520776f756c64206c696b6520746f206260008201527f7579206973206e6f7420617661696c61626c6520696e20746869732074696d6560208201527f2100000000000000000000000000000000000000000000000000000000000000604082015250565b60006139e2604183612ddc565b91506139ed82613960565b606082019050919050565b60006020820190508181036000830152613a11816139d5565b9050919050565b600060ff82169050919050565b613a2e81613a18565b8114613a3957600080fd5b50565b600081519050613a4b81613a25565b92915050565b600060208284031215613a6757613a66612c0e565b5b6000613a7584828501613a3c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115613b0457808604811115613ae057613adf613a7e565b5b6001851615613aef5780820291505b8081029050613afd85613aad565b9450613ac4565b94509492505050565b600082613b1d5760019050613bd9565b81613b2b5760009050613bd9565b8160018114613b415760028114613b4b57613b7a565b6001915050613bd9565b60ff841115613b5d57613b5c613a7e565b5b8360020a915084821115613b7457613b73613a7e565b5b50613bd9565b5060208310610133831016604e8410600b8410161715613baf5782820a905083811115613baa57613ba9613a7e565b5b613bd9565b613bbc8484846001613aba565b92509050818404811115613bd357613bd2613a7e565b5b81810290505b9392505050565b6000613beb82612c76565b9150613bf683612c76565b9250613c237fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613b0d565b905092915050565b6000606082019050613c4060008301866133e0565b613c4d60208301856133e0565b613c5a6040830184612cec565b949350505050565b7f546865726520617265206e6f20617661696c61626c6520746f6b656e73206c6560008201527f667420666f722073656c656374656420616d6f756e7421000000000000000000602082015250565b6000613cbe603783612ddc565b9150613cc982613c62565b604082019050919050565b60006020820190508181036000830152613ced81613cb1565b9050919050565b6000613cff82612c76565b9150613d0a83612c76565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613d3f57613d3e613a7e565b5b828201905092915050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613da6602e83612ddc565b9150613db182613d4a565b604082019050919050565b60006020820190508181036000830152613dd581613d99565b9050919050565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b6000613e1260018361386c565b9150613e1d82613ddc565b600182019050919050565b7f226e616d65223a20220000000000000000000000000000000000000000000000600082015250565b6000613e5e60098361386c565b9150613e6982613e28565b600982019050919050565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b6000613eaa60028361386c565b9150613eb582613e74565b600282019050919050565b7f226465736372697074696f6e223a20224672616374696f6e616c69736564205260008201527f65616c204573746174652050726f70657274792062792057616b61727520436f60208201527f6d70616e79222c00000000000000000000000000000000000000000000000000604082015250565b6000613f4260478361386c565b9150613f4d82613ec0565b604782019050919050565b7f22746f74616c546f6b656e73223a202200000000000000000000000000000000600082015250565b6000613f8e60108361386c565b9150613f9982613f58565b601082019050919050565b7f22746f6b656e73536f6c64223a20220000000000000000000000000000000000600082015250565b6000613fda600f8361386c565b9150613fe582613fa4565b600f82019050919050565b7f22636f756e747279223a20220000000000000000000000000000000000000000600082015250565b6000614026600c8361386c565b915061403182613ff0565b600c82019050919050565b7f22696d616765223a202200000000000000000000000000000000000000000000600082015250565b6000614072600a8361386c565b915061407d8261403c565b600a82019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b60006140be60018361386c565b91506140c982614088565b600182019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b600061410a60018361386c565b9150614115826140d4565b600182019050919050565b600061412b82613e05565b915061413682613e51565b9150614142828861390b565b915061414d82613e9d565b915061415882613f35565b915061416382613f81565b915061416f828761390b565b915061417a82613e9d565b915061418582613fcd565b9150614191828661390b565b915061419c82613e9d565b91506141a782614019565b91506141b3828561390b565b91506141be82613e9d565b91506141c982614065565b91506141d5828461388c565b91506141e0826140b1565b91506141eb826140fd565b91508190509695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000614230601d8361386c565b915061423b826141fa565b601d82019050919050565b600061425182614223565b915061425d828461390b565b915081905092915050565b7f5769746864726177616c20616d6f756e74206d7573742062652067726561746560008201527f72207468616e207a65726f000000000000000000000000000000000000000000602082015250565b60006142c4602b83612ddc565b91506142cf82614268565b604082019050919050565b600060208201905081810360008301526142f3816142b7565b9050919050565b600060408201905061430f60008301856133e0565b61431c6020830184612cec565b9392505050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b600061437f602983612ddc565b915061438a82614323565b604082019050919050565b600060208201905081810360008301526143ae81614372565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006143ef82612c76565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561442257614421613a7e565b5b600182019050919050565b7f50726f7065727479202300000000000000000000000000000000000000000000600082015250565b6000614463600a8361386c565b915061446e8261442d565b600a82019050919050565b600061448482614456565b9150614490828461390b565b915081905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006144f7602683612ddc565b91506145028261449b565b604082019050919050565b60006020820190508181036000830152614526816144ea565b9050919050565b600061453882612c76565b915061454383612c76565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561457c5761457b613a7e565b5b828202905092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006145e3602183612ddc565b91506145ee82614587565b604082019050919050565b60006020820190508181036000830152614612816145d6565b9050919050565b600060408201905061462e6000830185612cec565b61463b6020830184612cec565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061469e602883612ddc565b91506146a982614642565b604082019050919050565b600060208201905081810360008301526146cd81614691565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614730602583612ddc565b915061473b826146d4565b604082019050919050565b6000602082019050818103600083015261475f81614723565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006147c2602a83612ddc565b91506147cd82614766565b604082019050919050565b600060208201905081810360008301526147f1816147b5565b9050919050565b600060408201905081810360008301526148128185613360565b905081810360208301526148268184613360565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061486982612c76565b915061487483612c76565b9250826148845761488361482f565b5b828204905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006148c5602083612ddc565b91506148d08261488f565b602082019050919050565b600060208201905081810360008301526148f4816148b8565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614957602983612ddc565b9150614962826148fb565b604082019050919050565b600060208201905081810360008301526149868161494a565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006149b48261498d565b6149be8185614998565b93506149ce818560208601612ded565b6149d781612e20565b840191505092915050565b600060a0820190506149f760008301886133e0565b614a0460208301876133e0565b614a116040830186612cec565b614a1e6060830185612cec565b8181036080830152614a3081846149a9565b90509695505050505050565b600081519050614a4b81612d42565b92915050565b600060208284031215614a6757614a66612c0e565b5b6000614a7584828501614a3c565b91505092915050565b60008160e01c9050919050565b600060033d1115614aaa5760046000803e614aa7600051614a7e565b90505b90565b600060443d1015614abd57614b40565b614ac5612c04565b60043d036004823e80513d602482011167ffffffffffffffff82111715614aed575050614b40565b808201805167ffffffffffffffff811115614b0b5750505050614b40565b80602083010160043d038501811115614b28575050505050614b40565b614b3782602001850186612f2d565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000614b9f603483612ddc565b9150614baa82614b43565b604082019050919050565b60006020820190508181036000830152614bce81614b92565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000614c31602883612ddc565b9150614c3c82614bd5565b604082019050919050565b60006020820190508181036000830152614c6081614c24565b9050919050565b600060a082019050614c7c60008301886133e0565b614c8960208301876133e0565b8181036040830152614c9b8186613360565b90508181036060830152614caf8185613360565b90508181036080830152614cc381846149a9565b9050969550505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212209190b7d7ab600b521b29b507ac15217991376cadee31cf8afd6b8e602d96f56464736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ce5760003560e01c80638da5cb5b11610104578063c20938e0116100a2578063e985e9c511610071578063e985e9c514610566578063f242432a14610596578063f2fde38b146105b2578063ff2d2e07146105ce576101ce565b8063c20938e0146104cb578063ca98b78d146104e7578063dba197b114610503578063e674a85114610533576101ce565b80639c0c891f116100de5780639c0c891f14610433578063a22cb4651461044f578063ab15d2e61461046b578063afa5e0a91461049b576101ce565b80638da5cb5b146103c75780639029b815146103e557806395d89b4114610415576101ce565b80633ea521ef116101715780635a80e9fc1161014b5780635a80e9fc14610365578063715018a6146103955780637362377b1461039f57806384908631146103a9576101ce565b80633ea521ef146102e95780634e1273f41461030557806357d1780514610335576101ce565b80630e89341c116101ad5780630e89341c146102515780631b2ef1ca146102815780632eb2c2d61461029d5780633bb3a24d146102b9576101ce565b8062fdd58e146101d357806301ffc9a71461020357806306fdde0314610233575b600080fd5b6101ed60048036038101906101e89190612cac565b6105fe565b6040516101fa9190612cfb565b60405180910390f35b61021d60048036038101906102189190612d6e565b6106c7565b60405161022a9190612db6565b60405180910390f35b61023b6107a9565b6040516102489190612e6a565b60405180910390f35b61026b60048036038101906102669190612e8c565b610837565b6040516102789190612e6a565b60405180910390f35b61029b60048036038101906102969190612eb9565b61091c565b005b6102b760048036038101906102b291906130f6565b610b5c565b005b6102d360048036038101906102ce9190612e8c565b610bfd565b6040516102e09190612e6a565b60405180910390f35b61030360048036038101906102fe9190612e8c565b610c8d565b005b61031f600480360381019061031a9190613288565b610d69565b60405161032c91906133be565b60405180910390f35b61034f600480360381019061034a9190612e8c565b610e82565b60405161035c9190612e6a565b60405180910390f35b61037f600480360381019061037a9190612e8c565b610eb0565b60405161038c9190612e6a565b60405180910390f35b61039d610f88565b005b6103a7610f9c565b005b6103b1610ff3565b6040516103be9190612cfb565b60405180910390f35b6103cf610ff8565b6040516103dc91906133ef565b60405180910390f35b6103ff60048036038101906103fa9190612e8c565b611022565b60405161040c9190612db6565b60405180910390f35b61041d611042565b60405161042a9190612e6a565b60405180910390f35b61044d60048036038101906104489190613436565b6110d0565b005b61046960048036038101906104649190613476565b611107565b005b61048560048036038101906104809190612e8c565b61111d565b6040516104929190612e6a565b60405180910390f35b6104b560048036038101906104b09190612e8c565b6111bd565b6040516104c29190612e6a565b60405180910390f35b6104e560048036038101906104e091906134b6565b61126b565b005b61050160048036038101906104fc9190613597565b611334565b005b61051d60048036038101906105189190612e8c565b611454565b60405161052a9190612cfb565b60405180910390f35b61054d60048036038101906105489190612e8c565b61146c565b60405161055d9493929190613622565b60405180910390f35b610580600480360381019061057b9190613675565b6115ac565b60405161058d9190612db6565b60405180910390f35b6105b060048036038101906105ab91906136b5565b611640565b005b6105cc60048036038101906105c7919061374c565b6116e1565b005b6105e860048036038101906105e39190612e8c565b611765565b6040516105f59190612e6a565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561066f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610666906137eb565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061079257507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107a257506107a182611793565b5b9050919050565b600780546107b69061383a565b80601f01602080910402602001604051908101604052809291908181526020018280546107e29061383a565b801561082f5780601f106108045761010080835404028352916020019161082f565b820191906000526020600020905b81548152906001019060200180831161081257829003601f168201915b505050505081565b606060006004600084815260200190815260200160002080546108599061383a565b80601f01602080910402602001604051908101604052809291908181526020018280546108859061383a565b80156108d25780601f106108a7576101008083540402835291602001916108d2565b820191906000526020600020905b8154815290600101906020018083116108b557829003601f168201915b5050505050905060008151116108f0576108eb836117fd565b610914565b60038160405160200161090492919061393c565b6040516020818303038152906040525b915050919050565b600a600082815260200190815260200160002060009054906101000a900460ff1661097c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610973906139f8565b60405180910390fd5b600073cd198e12cd9a2fe20bc81f437b863f61f2d5c2df905060008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190613a51565b60ff1690508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330610a5b85600a610a399190613be0565b610a4d60328b61189190919063ffffffff16565b61189190919063ffffffff16565b6040518463ffffffff1660e01b8152600401610a7993929190613c2b565b600060405180830381600087803b158015610a9357600080fd5b505af1158015610aa7573d6000803e3d6000fd5b505050506000600960008581526020019081526020016000209050610ad98582600201546118a790919063ffffffff16565b81600101541015610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1690613cd4565b60405180910390fd5b84816002016000828254610b339190613cf4565b92505081905550610b55338587604051806020016040528060008152506118bd565b5050505050565b610b64611a6e565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610baa5750610ba985610ba4611a6e565b6115ac565b5b610be9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be090613dbc565b60405180910390fd5b610bf68585858585611a76565b5050505050565b60606000610c0a83610eb0565b610c1384611765565b610c1c85610e82565b610c25866111bd565b600c6000888152602001908152602001600020604051602001610c4c959493929190614120565b6040516020818303038152906040529050610c6681611d98565b604051602001610c769190614246565b604051602081830303815290604052915050919050565b610c95611efc565b60008111610cd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccf906142da565b60405180910390fd5b600073cd198e12cd9a2fe20bc81f437b863f61f2d5c2df90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610d15610ff8565b846040518363ffffffff1660e01b8152600401610d339291906142fa565b600060405180830381600087803b158015610d4d57600080fd5b505af1158015610d61573d6000803e3d6000fd5b505050505050565b60608151835114610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da690614395565b60405180910390fd5b6000835167ffffffffffffffff811115610dcc57610dcb612efe565b5b604051908082528060200260200182016040528015610dfa5781602001602082028036833780820191505090505b50905060005b8451811015610e7757610e47858281518110610e1f57610e1e6143b5565b5b6020026020010151858381518110610e3a57610e396143b5565b5b60200260200101516105fe565b828281518110610e5a57610e596143b5565b5b60200260200101818152505080610e70906143e4565b9050610e00565b508091505092915050565b6060600060096000848152602001908152602001600020600201549050610ea881611f7a565b915050919050565b60606000600960008481526020019081526020016000206000018054610ed59061383a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f019061383a565b8015610f4e5780601f10610f2357610100808354040283529160200191610f4e565b820191906000526020600020905b815481529060010190602001808311610f3157829003601f168201915b50505050509050610f5e83611f7a565b604051602001610f6e9190614479565b604051602081830303815290604052905080915050919050565b610f90611efc565b610f9a6000612052565b565b610fa4611efc565b60004790503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610fef573d6000803e3d6000fd5b5050565b603281565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a6020528060005260406000206000915054906101000a900460ff1681565b6008805461104f9061383a565b80601f016020809104026020016040519081016040528092919081815260200182805461107b9061383a565b80156110c85780601f1061109d576101008083540402835291602001916110c8565b820191906000526020600020905b8154815290600101906020018083116110ab57829003601f168201915b505050505081565b6110d8611efc565b80600a600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b611119611112611a6e565b8383612118565b5050565b600c602052806000526040600020600091509050805461113c9061383a565b80601f01602080910402602001604051908101604052809291908181526020018280546111689061383a565b80156111b55780601f1061118a576101008083540402835291602001916111b5565b820191906000526020600020905b81548152906001019060200180831161119857829003601f168201915b505050505081565b606060006009600084815260200190815260200160002060030180546111e29061383a565b80601f016020809104026020016040519081016040528092919081815260200182805461120e9061383a565b801561125b5780601f106112305761010080835404028352916020019161125b565b820191906000526020600020905b81548152906001019060200180831161123e57829003601f168201915b5050505050905080915050919050565b611273611efc565b600082116112b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ad906142da565b60405180910390fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6112df610ff8565b856040518363ffffffff1660e01b81526004016112fd9291906142fa565b600060405180830381600087803b15801561131757600080fd5b505af115801561132b573d6000803e3d6000fd5b50505050505050565b61133c611efc565b6113466006612285565b6000611352600661229b565b90506001600a600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000604051806080016040528061139684610eb0565b815260200186815260200160008152602001858152509050806009600084815260200190815260200160002060008201518160000190805190602001906113de929190612b61565b506020820151816001015560408201518160020155606082015181600301908051906020019061140f929190612b61565b5090505082600c6000848152602001908152602001600020908051906020019061143a929190612b61565b5061144d8261144884610bfd565b6122a9565b5050505050565b600b6020528060005260406000206000915090505481565b600960205280600052604060002060009150905080600001805461148f9061383a565b80601f01602080910402602001604051908101604052809291908181526020018280546114bb9061383a565b80156115085780601f106114dd57610100808354040283529160200191611508565b820191906000526020600020905b8154815290600101906020018083116114eb57829003601f168201915b5050505050908060010154908060020154908060030180546115299061383a565b80601f01602080910402602001604051908101604052809291908181526020018280546115559061383a565b80156115a25780601f10611577576101008083540402835291602001916115a2565b820191906000526020600020905b81548152906001019060200180831161158557829003601f168201915b5050505050905084565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611648611a6e565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061168e575061168d85611688611a6e565b6115ac565b5b6116cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c490613dbc565b60405180910390fd5b6116da8585858585612315565b5050505050565b6116e9611efc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611759576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117509061450d565b60405180910390fd5b61176281612052565b50565b606060006009600084815260200190815260200160002060010154905061178b81611f7a565b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606002805461180c9061383a565b80601f01602080910402602001604051908101604052809291908181526020018280546118389061383a565b80156118855780601f1061185a57610100808354040283529160200191611885565b820191906000526020600020905b81548152906001019060200180831161186857829003601f168201915b50505050509050919050565b6000818361189f919061452d565b905092915050565b600081836118b59190613cf4565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561192d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611924906145f9565b60405180910390fd5b6000611937611a6e565b90506000611944856125b1565b90506000611951856125b1565b90506119628360008985858961262b565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119c19190613cf4565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611a3f929190614619565b60405180910390a4611a5683600089858589612633565b611a658360008989898961263b565b50505050505050565b600033905090565b8151835114611aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab1906146b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2190614746565b60405180910390fd5b6000611b34611a6e565b9050611b4481878787878761262b565b60005b8451811015611cf5576000858281518110611b6557611b646143b5565b5b602002602001015190506000858381518110611b8457611b836143b5565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1c906147d8565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611cda9190613cf4565b9250508190555050505080611cee906143e4565b9050611b47565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611d6c9291906147f8565b60405180910390a4611d82818787878787612633565b611d90818787878787612813565b505050505050565b6060600082511415611dbb57604051806020016040528060008152509050611ef7565b6000604051806060016040528060408152602001614cd06040913990506000600360028551611dea9190613cf4565b611df4919061485e565b6004611e00919061452d565b67ffffffffffffffff811115611e1957611e18612efe565b5b6040519080825280601f01601f191660200182016040528015611e4b5781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015611eb7576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050611e5c565b5050600386510660018114611ed35760028114611ee657611eee565b603d6001830353603d6002830353611eee565b603d60018303535b50505080925050505b919050565b611f04611a6e565b73ffffffffffffffffffffffffffffffffffffffff16611f22610ff8565b73ffffffffffffffffffffffffffffffffffffffff1614611f78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6f906148db565b60405180910390fd5b565b606060006001611f89846129eb565b01905060008167ffffffffffffffff811115611fa857611fa7612efe565b5b6040519080825280601f01601f191660200182016040528015611fda5781602001600182028036833780820191505090505b509050600082602001820190505b600115612047578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816120315761203061482f565b5b049450600085141561204257612047565b611fe8565b819350505050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217e9061496d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516122789190612db6565b60405180910390a3505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b806004600084815260200190815260200160002090805190602001906122d0929190612b61565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6122fc84610837565b6040516123099190612e6a565b60405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237c90614746565b60405180910390fd5b600061238f611a6e565b9050600061239c856125b1565b905060006123a9856125b1565b90506123b983898985858961262b565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015612450576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612447906147d8565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125059190613cf4565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612582929190614619565b60405180910390a4612598848a8a86868a612633565b6125a6848a8a8a8a8a61263b565b505050505050505050565b60606000600167ffffffffffffffff8111156125d0576125cf612efe565b5b6040519080825280602002602001820160405280156125fe5781602001602082028036833780820191505090505b5090508281600081518110612616576126156143b5565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b61265a8473ffffffffffffffffffffffffffffffffffffffff16612b3e565b1561280b578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016126a09594939291906149e2565b6020604051808303816000875af19250505080156126dc57506040513d601f19601f820116820180604052508101906126d99190614a51565b60015b612782576126e8614a8b565b806308c379a0141561274557506126fd614aad565b806127085750612747565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273c9190612e6a565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277990614bb5565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280090614c47565b60405180910390fd5b505b505050505050565b6128328473ffffffffffffffffffffffffffffffffffffffff16612b3e565b156129e3578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612878959493929190614c67565b6020604051808303816000875af19250505080156128b457506040513d601f19601f820116820180604052508101906128b19190614a51565b60015b61295a576128c0614a8b565b806308c379a0141561291d57506128d5614aad565b806128e0575061291f565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129149190612e6a565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295190614bb5565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146129e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d890614c47565b60405180910390fd5b505b505050505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612a49577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612a3f57612a3e61482f565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612a86576d04ee2d6d415b85acef81000000008381612a7c57612a7b61482f565b5b0492506020810190505b662386f26fc100008310612ab557662386f26fc100008381612aab57612aaa61482f565b5b0492506010810190505b6305f5e1008310612ade576305f5e1008381612ad457612ad361482f565b5b0492506008810190505b6127108310612b03576127108381612af957612af861482f565b5b0492506004810190505b60648310612b265760648381612b1c57612b1b61482f565b5b0492506002810190505b600a8310612b35576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612b6d9061383a565b90600052602060002090601f016020900481019282612b8f5760008555612bd6565b82601f10612ba857805160ff1916838001178555612bd6565b82800160010185558215612bd6579182015b82811115612bd5578251825591602001919060010190612bba565b5b509050612be39190612be7565b5090565b5b80821115612c00576000816000905550600101612be8565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612c4382612c18565b9050919050565b612c5381612c38565b8114612c5e57600080fd5b50565b600081359050612c7081612c4a565b92915050565b6000819050919050565b612c8981612c76565b8114612c9457600080fd5b50565b600081359050612ca681612c80565b92915050565b60008060408385031215612cc357612cc2612c0e565b5b6000612cd185828601612c61565b9250506020612ce285828601612c97565b9150509250929050565b612cf581612c76565b82525050565b6000602082019050612d106000830184612cec565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d4b81612d16565b8114612d5657600080fd5b50565b600081359050612d6881612d42565b92915050565b600060208284031215612d8457612d83612c0e565b5b6000612d9284828501612d59565b91505092915050565b60008115159050919050565b612db081612d9b565b82525050565b6000602082019050612dcb6000830184612da7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e0b578082015181840152602081019050612df0565b83811115612e1a576000848401525b50505050565b6000601f19601f8301169050919050565b6000612e3c82612dd1565b612e468185612ddc565b9350612e56818560208601612ded565b612e5f81612e20565b840191505092915050565b60006020820190508181036000830152612e848184612e31565b905092915050565b600060208284031215612ea257612ea1612c0e565b5b6000612eb084828501612c97565b91505092915050565b60008060408385031215612ed057612ecf612c0e565b5b6000612ede85828601612c97565b9250506020612eef85828601612c97565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f3682612e20565b810181811067ffffffffffffffff82111715612f5557612f54612efe565b5b80604052505050565b6000612f68612c04565b9050612f748282612f2d565b919050565b600067ffffffffffffffff821115612f9457612f93612efe565b5b602082029050602081019050919050565b600080fd5b6000612fbd612fb884612f79565b612f5e565b90508083825260208201905060208402830185811115612fe057612fdf612fa5565b5b835b818110156130095780612ff58882612c97565b845260208401935050602081019050612fe2565b5050509392505050565b600082601f83011261302857613027612ef9565b5b8135613038848260208601612faa565b91505092915050565b600080fd5b600067ffffffffffffffff82111561306157613060612efe565b5b61306a82612e20565b9050602081019050919050565b82818337600083830152505050565b600061309961309484613046565b612f5e565b9050828152602081018484840111156130b5576130b4613041565b5b6130c0848285613077565b509392505050565b600082601f8301126130dd576130dc612ef9565b5b81356130ed848260208601613086565b91505092915050565b600080600080600060a0868803121561311257613111612c0e565b5b600061312088828901612c61565b955050602061313188828901612c61565b945050604086013567ffffffffffffffff81111561315257613151612c13565b5b61315e88828901613013565b935050606086013567ffffffffffffffff81111561317f5761317e612c13565b5b61318b88828901613013565b925050608086013567ffffffffffffffff8111156131ac576131ab612c13565b5b6131b8888289016130c8565b9150509295509295909350565b600067ffffffffffffffff8211156131e0576131df612efe565b5b602082029050602081019050919050565b60006132046131ff846131c5565b612f5e565b9050808382526020820190506020840283018581111561322757613226612fa5565b5b835b81811015613250578061323c8882612c61565b845260208401935050602081019050613229565b5050509392505050565b600082601f83011261326f5761326e612ef9565b5b813561327f8482602086016131f1565b91505092915050565b6000806040838503121561329f5761329e612c0e565b5b600083013567ffffffffffffffff8111156132bd576132bc612c13565b5b6132c98582860161325a565b925050602083013567ffffffffffffffff8111156132ea576132e9612c13565b5b6132f685828601613013565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61333581612c76565b82525050565b6000613347838361332c565b60208301905092915050565b6000602082019050919050565b600061336b82613300565b613375818561330b565b93506133808361331c565b8060005b838110156133b1578151613398888261333b565b97506133a383613353565b925050600181019050613384565b5085935050505092915050565b600060208201905081810360008301526133d88184613360565b905092915050565b6133e981612c38565b82525050565b600060208201905061340460008301846133e0565b92915050565b61341381612d9b565b811461341e57600080fd5b50565b6000813590506134308161340a565b92915050565b6000806040838503121561344d5761344c612c0e565b5b600061345b85828601612c97565b925050602061346c85828601613421565b9150509250929050565b6000806040838503121561348d5761348c612c0e565b5b600061349b85828601612c61565b92505060206134ac85828601613421565b9150509250929050565b600080604083850312156134cd576134cc612c0e565b5b60006134db85828601612c97565b92505060206134ec85828601612c61565b9150509250929050565b600067ffffffffffffffff82111561351157613510612efe565b5b61351a82612e20565b9050602081019050919050565b600061353a613535846134f6565b612f5e565b90508281526020810184848401111561355657613555613041565b5b613561848285613077565b509392505050565b600082601f83011261357e5761357d612ef9565b5b813561358e848260208601613527565b91505092915050565b6000806000606084860312156135b0576135af612c0e565b5b60006135be86828701612c97565b935050602084013567ffffffffffffffff8111156135df576135de612c13565b5b6135eb86828701613569565b925050604084013567ffffffffffffffff81111561360c5761360b612c13565b5b61361886828701613569565b9150509250925092565b6000608082019050818103600083015261363c8187612e31565b905061364b6020830186612cec565b6136586040830185612cec565b818103606083015261366a8184612e31565b905095945050505050565b6000806040838503121561368c5761368b612c0e565b5b600061369a85828601612c61565b92505060206136ab85828601612c61565b9150509250929050565b600080600080600060a086880312156136d1576136d0612c0e565b5b60006136df88828901612c61565b95505060206136f088828901612c61565b945050604061370188828901612c97565b935050606061371288828901612c97565b925050608086013567ffffffffffffffff81111561373357613732612c13565b5b61373f888289016130c8565b9150509295509295909350565b60006020828403121561376257613761612c0e565b5b600061377084828501612c61565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b60006137d5602a83612ddc565b91506137e082613779565b604082019050919050565b60006020820190508181036000830152613804816137c8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061385257607f821691505b602082108114156138665761386561380b565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b600081546138998161383a565b6138a3818661386c565b945060018216600081146138be57600181146138cf57613902565b60ff19831686528186019350613902565b6138d885613877565b60005b838110156138fa578154818901526001820191506020810190506138db565b838801955050505b50505092915050565b600061391682612dd1565b613920818561386c565b9350613930818560208601612ded565b80840191505092915050565b6000613948828561388c565b9150613954828461390b565b91508190509392505050565b7f5468652070726f706572747920796f7520776f756c64206c696b6520746f206260008201527f7579206973206e6f7420617661696c61626c6520696e20746869732074696d6560208201527f2100000000000000000000000000000000000000000000000000000000000000604082015250565b60006139e2604183612ddc565b91506139ed82613960565b606082019050919050565b60006020820190508181036000830152613a11816139d5565b9050919050565b600060ff82169050919050565b613a2e81613a18565b8114613a3957600080fd5b50565b600081519050613a4b81613a25565b92915050565b600060208284031215613a6757613a66612c0e565b5b6000613a7584828501613a3c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115613b0457808604811115613ae057613adf613a7e565b5b6001851615613aef5780820291505b8081029050613afd85613aad565b9450613ac4565b94509492505050565b600082613b1d5760019050613bd9565b81613b2b5760009050613bd9565b8160018114613b415760028114613b4b57613b7a565b6001915050613bd9565b60ff841115613b5d57613b5c613a7e565b5b8360020a915084821115613b7457613b73613a7e565b5b50613bd9565b5060208310610133831016604e8410600b8410161715613baf5782820a905083811115613baa57613ba9613a7e565b5b613bd9565b613bbc8484846001613aba565b92509050818404811115613bd357613bd2613a7e565b5b81810290505b9392505050565b6000613beb82612c76565b9150613bf683612c76565b9250613c237fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613b0d565b905092915050565b6000606082019050613c4060008301866133e0565b613c4d60208301856133e0565b613c5a6040830184612cec565b949350505050565b7f546865726520617265206e6f20617661696c61626c6520746f6b656e73206c6560008201527f667420666f722073656c656374656420616d6f756e7421000000000000000000602082015250565b6000613cbe603783612ddc565b9150613cc982613c62565b604082019050919050565b60006020820190508181036000830152613ced81613cb1565b9050919050565b6000613cff82612c76565b9150613d0a83612c76565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613d3f57613d3e613a7e565b5b828201905092915050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613da6602e83612ddc565b9150613db182613d4a565b604082019050919050565b60006020820190508181036000830152613dd581613d99565b9050919050565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b6000613e1260018361386c565b9150613e1d82613ddc565b600182019050919050565b7f226e616d65223a20220000000000000000000000000000000000000000000000600082015250565b6000613e5e60098361386c565b9150613e6982613e28565b600982019050919050565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b6000613eaa60028361386c565b9150613eb582613e74565b600282019050919050565b7f226465736372697074696f6e223a20224672616374696f6e616c69736564205260008201527f65616c204573746174652050726f70657274792062792057616b61727520436f60208201527f6d70616e79222c00000000000000000000000000000000000000000000000000604082015250565b6000613f4260478361386c565b9150613f4d82613ec0565b604782019050919050565b7f22746f74616c546f6b656e73223a202200000000000000000000000000000000600082015250565b6000613f8e60108361386c565b9150613f9982613f58565b601082019050919050565b7f22746f6b656e73536f6c64223a20220000000000000000000000000000000000600082015250565b6000613fda600f8361386c565b9150613fe582613fa4565b600f82019050919050565b7f22636f756e747279223a20220000000000000000000000000000000000000000600082015250565b6000614026600c8361386c565b915061403182613ff0565b600c82019050919050565b7f22696d616765223a202200000000000000000000000000000000000000000000600082015250565b6000614072600a8361386c565b915061407d8261403c565b600a82019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b60006140be60018361386c565b91506140c982614088565b600182019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b600061410a60018361386c565b9150614115826140d4565b600182019050919050565b600061412b82613e05565b915061413682613e51565b9150614142828861390b565b915061414d82613e9d565b915061415882613f35565b915061416382613f81565b915061416f828761390b565b915061417a82613e9d565b915061418582613fcd565b9150614191828661390b565b915061419c82613e9d565b91506141a782614019565b91506141b3828561390b565b91506141be82613e9d565b91506141c982614065565b91506141d5828461388c565b91506141e0826140b1565b91506141eb826140fd565b91508190509695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000614230601d8361386c565b915061423b826141fa565b601d82019050919050565b600061425182614223565b915061425d828461390b565b915081905092915050565b7f5769746864726177616c20616d6f756e74206d7573742062652067726561746560008201527f72207468616e207a65726f000000000000000000000000000000000000000000602082015250565b60006142c4602b83612ddc565b91506142cf82614268565b604082019050919050565b600060208201905081810360008301526142f3816142b7565b9050919050565b600060408201905061430f60008301856133e0565b61431c6020830184612cec565b9392505050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b600061437f602983612ddc565b915061438a82614323565b604082019050919050565b600060208201905081810360008301526143ae81614372565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006143ef82612c76565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561442257614421613a7e565b5b600182019050919050565b7f50726f7065727479202300000000000000000000000000000000000000000000600082015250565b6000614463600a8361386c565b915061446e8261442d565b600a82019050919050565b600061448482614456565b9150614490828461390b565b915081905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006144f7602683612ddc565b91506145028261449b565b604082019050919050565b60006020820190508181036000830152614526816144ea565b9050919050565b600061453882612c76565b915061454383612c76565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561457c5761457b613a7e565b5b828202905092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006145e3602183612ddc565b91506145ee82614587565b604082019050919050565b60006020820190508181036000830152614612816145d6565b9050919050565b600060408201905061462e6000830185612cec565b61463b6020830184612cec565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061469e602883612ddc565b91506146a982614642565b604082019050919050565b600060208201905081810360008301526146cd81614691565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614730602583612ddc565b915061473b826146d4565b604082019050919050565b6000602082019050818103600083015261475f81614723565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006147c2602a83612ddc565b91506147cd82614766565b604082019050919050565b600060208201905081810360008301526147f1816147b5565b9050919050565b600060408201905081810360008301526148128185613360565b905081810360208301526148268184613360565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061486982612c76565b915061487483612c76565b9250826148845761488361482f565b5b828204905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006148c5602083612ddc565b91506148d08261488f565b602082019050919050565b600060208201905081810360008301526148f4816148b8565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614957602983612ddc565b9150614962826148fb565b604082019050919050565b600060208201905081810360008301526149868161494a565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006149b48261498d565b6149be8185614998565b93506149ce818560208601612ded565b6149d781612e20565b840191505092915050565b600060a0820190506149f760008301886133e0565b614a0460208301876133e0565b614a116040830186612cec565b614a1e6060830185612cec565b8181036080830152614a3081846149a9565b90509695505050505050565b600081519050614a4b81612d42565b92915050565b600060208284031215614a6757614a66612c0e565b5b6000614a7584828501614a3c565b91505092915050565b60008160e01c9050919050565b600060033d1115614aaa5760046000803e614aa7600051614a7e565b90505b90565b600060443d1015614abd57614b40565b614ac5612c04565b60043d036004823e80513d602482011167ffffffffffffffff82111715614aed575050614b40565b808201805167ffffffffffffffff811115614b0b5750505050614b40565b80602083010160043d038501811115614b28575050505050614b40565b614b3782602001850186612f2d565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000614b9f603483612ddc565b9150614baa82614b43565b604082019050919050565b60006020820190508181036000830152614bce81614b92565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000614c31602883612ddc565b9150614c3c82614bd5565b604082019050919050565b60006020820190508181036000830152614c6081614c24565b9050919050565b600060a082019050614c7c60008301886133e0565b614c8960208301876133e0565b8181036040830152614c9b8186613360565b90508181036060830152614caf8185613360565b90508181036080830152614cc381846149a9565b9050969550505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212209190b7d7ab600b521b29b507ac15217991376cadee31cf8afd6b8e602d96f56464736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the concatenation of the `_baseURI` and the token-specific uri if the latter is set This enables the following behaviors: - if `_tokenURIs[tokenId]` is set, then the result is the concatenation   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`   is empty per default); - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`   which in most cases will contain `ERC1155._uri`; - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a   uri value set, then the result is empty."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 144,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 146,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1511,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "_baseURI",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1515,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3702,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Counter)2006_storage"
      },
      {
        "astId": 3704,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3706,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 3723,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "tokenIdToProperty",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Property)3718_storage)"
      },
      {
        "astId": 3727,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "checkTokenSupplyStatus",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3731,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "totalTokenSupplyForAGivenProperty",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3735,
        "contract": "contracts/RealEstateV2.sol:RealEstateV2",
        "label": "tokenIdToImageLink",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Property)3718_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealEstateV2.Property)",
        "numberOfBytes": "32",
        "value": "t_struct(Property)3718_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2006_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2005,
            "contract": "contracts/RealEstateV2.sol:RealEstateV2",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Property)3718_storage": {
        "encoding": "inplace",
        "label": "struct RealEstateV2.Property",
        "members": [
          {
            "astId": 3711,
            "contract": "contracts/RealEstateV2.sol:RealEstateV2",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3713,
            "contract": "contracts/RealEstateV2.sol:RealEstateV2",
            "label": "totalTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3715,
            "contract": "contracts/RealEstateV2.sol:RealEstateV2",
            "label": "tokensSold",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3717,
            "contract": "contracts/RealEstateV2.sol:RealEstateV2",
            "label": "country",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}